*Vital/System/Job.txt*		A job wrapper for Vim 8 and Neovim

Version: 0.1.0-dev
Author:  Alisue <lambdalisue@hashnote.net>
License: MIT license
Support: Vim 8.0.0027 and above
Support: Neovim 0.2.0 and above


=============================================================================
CONTENTS					*Vital.System.Job-contents*

INTRODUCTION				|Vital.System.Job-introduction|
FUNCTION				|Vital.System.Job-function|
INSTANCE				|Vital.System.Job-instance|


=============================================================================
INTRODUCTION					*Vital.System.Job-introduction*

*Vital.System.Job* is a wrapper module of job feature which has introduced
from Vim 8 or Neovim.

=============================================================================
USAGE						*Vital.System.Job-usage*

The following code start "git status" and store its' stdout/stderr output in
the instance attribute.
>
	function! s:on_stdout(data) abort dict
	  let self.stdout[-1] .= a:data[0]
	  call extend(self.stdout, a:data[1:])
	endfunction

	function! s:on_stderr(data) abort dict
	  let self.stderr[-1] .= a:data[0]
	  call extend(self.stderr, a:data[1:])
	endfunction

	function! s:on_exit(exitval) abort dict
	  let self.exit_status = a:exitval
	endfunction

	let job = s:Job.start(['git', 'status'], {
	      \ 'stdout': [],
	      \ 'stderr': [],
	      \ 'exit_status': -1,
	      \ 'on_stdout': function('on_stdout'),
	      \ 'on_stderr': function('on_stderr'),
	      \ 'on_exit': function('on_exit'),
	      \})
<

=============================================================================
FUNCTION					*Vital.System.Job-function*

						*Vital.System.Job.start()*
start({args}[, {options}])
	Start a new process with job feature of Vim 8 or Neovim and return a
	job instance (|Vital.System.Job-instance|).
	It throws exceptions when {args} is not a |List| instance, an empty
	list, or the first item of {args} is not executable.

	The following attributes are allowed in {options}.

	"on_stdout"	A callback called when the process output to stdout.
	"on_stderr"	A callback called when the process output to stderr.
	"on_exit"	A callback called when the process terminated.

	Note that all attributes in the {options} is exposed to the job
	instance and users can access that in callbacks by |self| while the
	callbacks above are called as a dictionary function of the job
	instance.


=============================================================================
INSTANCE					*Vital.System.Job-instance*

					*Vital.System.Job-instance.id()*
id()
	Return an unique number of the process.

					*Vital.System.Job-instance.status()*
status()
	Return a status of the process. The value is one of

	"run"		The process is running.
	"dead"		The process has terminated or failed to open.

	Note that it returns "dead" instead of "fail" which is available in
	Vim's job_status() function while "fail" is not available on Unix
	system.

					*Vital.System.Job-instance.send()*
send({data})
	Send {data} to the process. The {data} may be a string or a list.
	When {data} is a list, it is assumed as a newline separated list and
	all newline character in each item is replaced to "" in Vim and "\0"
	in Neovim.
	Note that no extra newline is appended to the {data}, mean that users
	may need to add by themselves.
>
	call job.send('abc' . "\n")
	" -> send: abc\n
	call job.send(['abc', '123\n456', ''])
	" -> send: abc\n123\045\n (Vim: abc\n123456\n)
<
					*Vital.System.Job-instance.stop()*
stop()
	Send STOP single to terminate the process.

					*Vital.System.Job-instance.wait()*
wait([{timeout}])
	Wait until the process has terminated or {timeout} has passed.
	The unit of {timeout} is milliseconds.
	When user hit <C-c>, the process will terminate.

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
